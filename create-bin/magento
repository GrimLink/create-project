#!/bin/bash

GITNAME="$(git config --global --get user.name | head -n1 | cut -d " " -f1)"
GITEMAIL="$(git config --global --get user.email)"
NAME="$1"
DOMAIN="test"
ADMINNAME="$(echo "$GITNAME" | tr '[:upper:]' '[:lower:]')"
ADMINPASS="admin123$"
SKIP="false"
SECURE="true"
LARAVEL_VALET="false"
WEPROVIDE_VALET="false"

DEFAULT_DBHOST="localhost"
DEFAULT_DBUSER="root"
DEFAULT_DBPASS="root"

if [[ -z "$NAME" ]]; then
  echo "The Magento install requires a name!" && exit
fi

if [[ $(valet -V | cut -f1,2 -d ' ') == "Laravel Valet" ]]; then
  DEFAULT_DBHOST="127.0.0.1"
  LARAVEL_VALET="true"
fi

if [[ $(valet -V | cut -f1 -d ' ') == "Valet+" ]]; then
  WEPROVIDE_VALET="true"
fi

echo "What Magento version do want to install?"
echo "  - empty = 2.4 latest"
echo "  - 2.3 = 2.3 latest"
echo "  Or use your own Magento2 version"
read -p "Version: " VERSION
if [[ -z "$VERSION" ]]; then
  echo "Using magento 2.4";
  MVERSION="2.4.4"
elif [[ "$VERSION" == "2.3" ]]; then
  echo "Using magento 2.3 latest"
  MVERSION="2.3.6"
else
  echo "Using magento $VERSION"
  MVERSION="$VERSION"
fi

PLUGINS=(
  community-engineering/language-nl_nl
  siteation/magento2-module-storeinfo
  siteation/magento2-module-storeinfo-extra
);

DEVPLUGINS=(
  reessolutions/db-override
);

SETCONFIG=(
  "config:set admin/security/session_lifetime 86400"
  "config:set admin/security/password_lifetime ''"
  "setup:config:set --cache-backend=redis --cache-backend-redis-server=127.0.0.1 --cache-backend-redis-db=0 -n"
  "setup:config:set --page-cache=redis --page-cache-redis-server=127.0.0.1 --page-cache-redis-db=1 -n"
  "deploy:mode:set developer"
  "module:disable Magento_Csp"
  "module:disable Magento_TwoFactorAuth"
);

read -p "Run quick install? [Y/n] " && echo ""
if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
  SKIP="true"
fi

# Setup for instalation
if [[ $SKIP == "false" ]]; then
  read -p "DB Host (${DEFAULT_DBHOST}) or: " DBHOST && echo ""
  read -p "DB name: ${NAME} or " DBNAME && echo ""
  read -p "DB User (${DEFAULT_DBUSER}) or: " DBUSER && echo ""
  read -p "DB Password (${DEFAULT_DBPASS}) or: " DBPASS && echo ""
fi

if [[ -z "$DBHOST" ]]; then DBHOST="${DEFAULT_DBHOST}"; fi
if [[ -z "$DBNAME" ]]; then DBNAME="${NAME}"; fi
if [[ -z "$DBUSER" ]]; then DBUSER="${DEFAULT_DBUSER}"; fi
if [[ -z "$DBPASS" ]]; then DBPASS="${DEFAULT_DBPASS}"; fi

MYSQL="mysql -u $DBUSER --password=${DBPASS} --socket /tmp/mysql_3306.sock"

if command -v valet &> /dev/null; then
  if [[ $LARAVEL_VALET == "true" ]]; then
    echo "creating new database"
    $MYSQL -e "DROP DATABASE \`${DBNAME}\`;"
    $MYSQL -e "CREATE DATABASE \`${DBNAME}\`;"
  elif [[ $WEPROVIDE_VALET == "true" ]]; then
    echo "creating new database"
    valet db create $DBNAME
  fi
elif command -v mysql &> /dev/null; then
  echo "creating new database"
  $MYSQL -e "DROP DATABASE \`${DBNAME}\`;"
  $MYSQL -e "CREATE DATABASE \`${DBNAME}\`;"
else
  echo "First create a datebase for your Magento project"
  read -rsn1 -p "When ready, press any key to continue"
fi

if [[ $SKIP == "false" ]]; then
  if [[ $SECURE == "true" ]]; then
    read -p "Use secure url? [Y/n] " && echo ""
    if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then SECURE="false"; fi;
  else
    read -p "Use secure url? [y/N] " && echo ""
    if [[ $REPLY =~ ^[yY]|[yY][eE][sS]$ ]]; then SECURE="true"; fi;
  fi
fi

if [[ $SECURE == "true" ]]; then
  URL="https://${NAME}.${DOMAIN}/"
  if command -v valet &> /dev/null; then
    echo "Setting domain ssl certificate"
    valet secure $NAME
  fi
else
  URL="http://${NAME}.${DOMAIN}/"
fi

if [[ $SKIP == "false" ]]; then
  read -p "Email (${GITEMAIL}) or: " USEREMAIL && echo ""
  read -p "Firstname (${GITNAME}) or: " USERFIRST && echo ""
  read -p "Lastname (admin) or: " USERLAST && echo ""
  read -p "Admin name (${ADMINNAME}) or: " USERNAME && echo ""
  read -sp "Password ($ADMINPASS) or: " USERPASS && echo ""
  read -p "BackendURL (admin) or: " BACKURL && echo ""
fi

if [[ -z "$USEREMAIL" ]]; then USEREMAIL="$GITEMAIL"; fi
if [[ -z "$USERFIRST" ]]; then USERFIRST="$GITNAME"; fi
if [[ -z "$USERLAST" ]]; then USERLAST="admin"; fi
if [[ -z "$USERNAME" ]]; then USERNAME="$ADMINNAME"; fi
if [[ -z "$USERPASS" ]]; then USERPASS="$ADMINPASS"; fi
if [[ -z "$BACKURL" ]]; then BACKURL="admin"; fi

# Setup installation
echo "Setting up Magento 2 composer"
composer create-project \
  --no-install \
  --stability dev \
  --prefer-source \
  --repository-url=https://repo.magento.com/ magento/project-community-edition=$MVERSION $NAME &&
cd $NAME

echo "Adjusting composer settings to allow dev packages"
composer config minimum-stability dev
composer config prefer-stable true

echo "Setting up local composer folder"
mkdir -p package-source
composer config repositories.local-packages path package-source/*/*

if [[ $SKIP == "true" ]]; then
  echo "Copying composer authentication"
  mkdir -p var/composer_home
  test -f ~/.composer/auth.json &&
  cp ~/.composer/auth.json var/composer_home/auth.json
else
  read -p "Copy composer authentication? [Y/n] "
  echo ""
  if [[ $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
    echo "Copying composer authentication"
    mkdir -p var/composer_home
    test -f ~/.composer/auth.json &&
    cp ~/.composer/auth.json var/composer_home/auth.json
  fi
fi

echo "Adding Magento 2 modules"
if [[ $SKIP == "true" ]]; then
  for i in "${PLUGINS[@]}"; do
    composer require --no-update $i
  done;
else
  for i in "${PLUGINS[@]}"; do
    read -p "Also install $i? [Y/n] " && echo ""
    if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
      composer require --no-update $i
    fi
  done;
fi

if [[ $SKIP == "true" ]]; then
  for i in "${DEVPLUGINS[@]}"; do
    composer require --dev --no-update $i
  done;
else
  for i in "${DEVPLUGINS[@]}"; do
    read -p "Also install $i? [Y/n] " && echo ""
    if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
      composer require --dev --no-update $i
    fi
  done;
fi

# Run installation
echo "Running instalation.. Enjoy a cup of coffee in the meantime"
composer install

bin/magento setup:install \
  --base-url="${URL}" \
  --db-host="${DBHOST}" \
  --db-name="${DBNAME}" \
  --db-user="${DBUSER}" \
  --db-password="${DBPASS}" \
  --admin-firstname="${USERFIRST}" \
  --admin-lastname="${USERLAST}" \
  --admin-email="${USEREMAIL}" \
  --admin-user="${USERNAME}" \
  --admin-password="${USERPASS}" \
  --language=en_US \
  --currency=USD \
  --timezone=Europe/Amsterdam \
  --use-rewrites=1 \
  --backend-frontname="${BACKURL}"

if [[ $SKIP == "true" ]]; then
  for i in "${SETCONFIG[@]}"; do
    bin/magento $i
  done;
else
  read -p "Set mode to developer? [Y/n] "
  echo ""
  if [[ $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
    bin/magento deploy:mode:set production
  else
    for i in "${SETCONFIG[@]}"; do
      bin/magento $i
    done;
  fi
fi

# if mage
if command -v mage &>/dev/null; then
  # Add hyva
  read -p "Also install Hyv√§? [Y/n] "
  echo ""
  if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
    mage add hyva
  else
    bin/magento setup:upgrade
  fi;
else
  bin/magento setup:upgrade
fi

bin/magento indexer:reindex
bin/magento cache:flush
