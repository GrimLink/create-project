#!/bin/bash

GITNAME="$(git config --global --get user.name | head -n1 | cut -d " " -f1)"
GITEMAIL="$(git config --global --get user.email)"
NAME="$1"
DOMAIN="test"
ADMINNAME="admin_$(echo "$GITNAME" | tr '[:upper:]' '[:lower:]')"
SKIP="false"

PLUGINS=(
  community-engineering/language-nl_nl
);

DEVPLUGINS=(
  mage2tv/magento-cache-clean
);

if [[ -z "$NAME" ]]; then
  echo "The Magento install requires a name!" && exit
fi

echo "What Magento version do want to install?"
echo "  - empty = Latest stable"
echo "  - dev = Latest dev"
echo "  Or use your own Magento2 version"
read -p "Version: " VERSION
if [[ -z "$VERSION" ]]; then
  echo "Using latest stable version";
  MVERSION="=2.3.*"
elif [[ "$VERSION" == "dev" ]]; then
  echo "Using latest version"
else
  echo "Using version $VERSION"
  MVERSION="=$VERSION"
fi

read -p "Run quick install? [Y/n] " && echo ""
if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
  SKIP="true"
fi

# Setup for instalation
if [[ $SKIP == "false" ]]; then
  read -p "DB Host (localhost) or: " DBHOST && echo ""
  read -p "DB name: ${NAME} or " DBNAME && echo ""
  read -p "DB User (root) or: " DBUSER && echo ""
  read -p "DB Password (root) or: " DBPASS && echo ""
fi

if [[ -z "$DBHOST" ]]; then DBHOST="localhost"; fi
if [[ -z "$DBNAME" ]]; then DBNAME="${NAME}"; fi
if [[ -z "$DBUSER" ]]; then DBUSER="root"; fi
if [[ -z "$DBPASS" ]]; then DBPASS="root"; fi

if command -v valet &> /dev/null; then
  echo "creating new database"
  valet db create $DBNAME
else
  echo "First create a datebase for you Magento project"
  read -rsn1 -p "When ready, press any key to continue"
fi

echo "Set URL"
echo " - empty = http://${DBNAME}.${DOMAIN}/"
echo " - s or secure = https://${DBNAME}.${DOMAIN}/"
echo " - Or use your own"
read URL
if [[ -z "$URL" ]]; then
  URL="http://${DBNAME}.${DOMAIN}/"
elif [[ "$URL" == "s" ]] || [[ "$URL" == "secure" ]]; then
  URL="https://${DBNAME}.${DOMAIN}/"
fi

if [[ $SKIP == "false" ]]; then
  read -p "Email (${GITEMAIL}) or: " USEREMAIL && echo ""
  read -p "Firstname (${GITNAME}) or: " USERFIRST && echo ""
  read -p "Lastname (admin) or: " USERLAST && echo ""
  read -p "Admin name (${ADMINNAME}) or: " USERNAME && echo ""
  read -sp "Password (admin123) or: " USERPASS && echo ""
  read -p "BackendURL (admin) or: " BACKURL && echo ""
fi

if [[ -z "$USEREMAIL" ]]; then USEREMAIL="$GITEMAIL"; fi
if [[ -z "$USERFIRST" ]]; then USERFIRST="$GITNAME"; fi
if [[ -z "$USERLAST" ]]; then USERLAST="admin"; fi
if [[ -z "$USERNAME" ]]; then USERNAME="$ADMINNAME"; fi
if [[ -z "$USERPASS" ]]; then USERPASS="admin123"; fi
if [[ -z "$BACKURL" ]]; then BACKURL="admin"; fi

# Setup installation
echo "Setting up Magento 2 composer"
composer create-project \
  --no-install \
  --stability dev \
  --prefer-source \
  --repository-url=https://repo.magento.com/ magento/project-community-edition$MVERSION $NAME &&
cd $NAME

if command -v valet &> /dev/null; then
  if [[ "$URL" == "s" ]] || [[ "$URL" == "secure" ]]; then
    echo "Setting domain ssl certificate"
    valet secure $NAME
  fi
fi

echo "Adjusting composer settings to allow dev packages"
composer config minimum-stability dev
composer config prefer-stable true

echo "Setting up local composer folder"
read -p "Vendor name (Leave blank to skip this step): " COMPSERVENDOR && echo ""
if [[ -n "$COMPSERVENDOR" ]]; then 
  mkdir -p package-source/$COMPSERVENDOR
  composer config repositories.local-packages path package-source/$COMPSERVENDOR/\*
fi

if [[ $SKIP == "true" ]]; then
  echo "Copying composer authentication"
  mkdir -p var/composer_home
  test -f ~/.composer/auth.json &&
  cp ~/.composer/auth.json var/composer_home/auth.json
else
  read -p "Copy composer authentication? [Y/n] "
  echo ""
  if [[ $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
    echo "Copying composer authentication"
    mkdir -p var/composer_home
    test -f ~/.composer/auth.json &&
    cp ~/.composer/auth.json var/composer_home/auth.json
  fi
fi

echo "Adding Magento 2 modules"
if [[ $SKIP == "true" ]]; then
  for i in "${PLUGINS[@]}"; do
    composer require --no-update $i
  done;
else
  for i in "${PLUGINS[@]}"; do
    read -p "Also install $i? [Y/n] " && echo ""
    if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
      composer require --no-update $i
    fi
  done;
fi

if [[ $SKIP == "true" ]]; then
  for i in "${DEVPLUGINS[@]}"; do
    composer require --dev --no-update $i
  done;
else
  for i in "${DEVPLUGINS[@]}"; do
    read -p "Also install $i? [Y/n] " && echo ""
    if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
      composer require --dev --no-update $i
    fi
  done;
fi

# Run installation
echo "Running instalation.. Enjoy a cup of coffee in the meantime"
composer install

bin/magento setup:install \
  --base-url="${URL}" \
  --db-host="${DBHOST}" \
  --db-name="${DBNAME}" \
  --db-user="${DBUSER}" \
  --db-password="${DBPASS}" \
  --admin-firstname="${USERFIRST}" \
  --admin-lastname="${USERLAST}" \
  --admin-email="${USEREMAIL}" \
  --admin-user="${USERNAME}" \
  --admin-password="${USERPASS}" \
  --language=en_US \
  --currency=USD \
  --timezone=Europe/Amsterdam \
  --use-rewrites=1 \
  --backend-frontname="${BACKURL}"

if [[ $SKIP == "true" ]]; then
  bin/magento deploy:mode:set developer
  bin/magento config:set admin/security/session_lifetime 86400
  bin/magento config:set admin/security/password_lifetime ""
else
  read -p "Set mode to developer? [Y/n] "
  echo ""
  if [[ $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
    bin/magento deploy:mode:set production
  else
    bin/magento deploy:mode:set developer
    bin/magento config:set admin/security/session_lifetime 86400
    bin/magento config:set admin/security/password_lifetime ""
  fi
fi

bin/magento s:up

read -p "Also install sample data? [y/N] "
echo ""
if [[ $REPLY =~ ^[yY]|[yY][eE][sS]$ ]]; then
  bin/magento sampledata:deploy;
fi
