#!/bin/bash

GITNAME="$(git config --global --get user.name | head -n1 | cut -d " " -f1)"
GITEMAIL="$(git config --global --get user.email)"
NAME="$1"
DOMAIN="test"
ADMINNAME="admin_$(echo "$GITNAME" | tr '[:upper:]' '[:lower:]')"
SKIP="false"
SECURE="true"
HYVA="false"

if [[ -z "$NAME" ]]; then
  echo "The Magento install requires a name!" && exit
fi

echo "What Magento version do want to install?"
echo "  - empty = 2.4 latest"
echo "  - 2.3 = 2.3 latest"
echo "  Or use your own Magento2 version"
read -p "Version: " VERSION
if [[ -z "$VERSION" ]]; then
  echo "Using magento 2.4";
  MVERSION="2.4.3"
elif [[ "$VERSION" == "2.3" ]]; then
  echo "Using magento 2.3 latest"
  MVERSION="2.3.6"
else
  echo "Using magento $VERSION"
  MVERSION="$VERSION"
fi

PLUGINS=(
  community-engineering/language-nl_nl
  siteation/magento2-module-storeinfo
  siteation/magento2-module-storeinfo-extra
);

DEVPLUGINS=();

SETCONFIG=(
  "config:set admin/security/session_lifetime 86400"
  "config:set admin/security/password_lifetime ''"
  "setup:config:set --cache-backend=redis --cache-backend-redis-server=127.0.0.1 --cache-backend-redis-db=0 -n"
  "setup:config:set --page-cache=redis --page-cache-redis-server=127.0.0.1 --page-cache-redis-db=1 -n"
  "deploy:mode:set developer"
  "module:disable Magento_Csp"
  "module:disable Magento_TwoFactorAuth"
  "setup:upgrade"
  "cache:disable full_page block_html layout"
  "indexer:reindex"
  "cache:flush"
);

read -p "Run quick install? [Y/n] " && echo ""
if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
  SKIP="true"
fi

# Setup for instalation
if [[ $SKIP == "false" ]]; then
  read -p "DB Host (localhost) or: " DBHOST && echo ""
  read -p "DB name: ${NAME} or " DBNAME && echo ""
  read -p "DB User (root) or: " DBUSER && echo ""
  read -p "DB Password (root) or: " DBPASS && echo ""
fi

if [[ -z "$DBHOST" ]]; then DBHOST="localhost"; fi
if [[ -z "$DBNAME" ]]; then DBNAME="${NAME}"; fi
if [[ -z "$DBUSER" ]]; then DBUSER="root"; fi
if [[ -z "$DBPASS" ]]; then DBPASS="root"; fi

if command -v valet &> /dev/null; then
  echo "creating new database"
  valet db create $DBNAME
else
  echo "First create a datebase for you Magento project"
  read -rsn1 -p "When ready, press any key to continue"
fi

if [[ $SKIP == "false" ]]; then
  if [[ $SECURE == "true" ]]; then
    read -p "Use secure url? [Y/n] " && echo ""
    if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then SECURE="false"; fi;
  else
    read -p "Use secure url? [y/N] " && echo ""
    if [[ $REPLY =~ ^[yY]|[yY][eE][sS]$ ]]; then SECURE="true"; fi;
  fi
fi

if [[ $SECURE == "true" ]]; then
  URL="https://${DBNAME}.${DOMAIN}/"
  if command -v valet &> /dev/null; then
    echo "Setting domain ssl certificate"
    valet secure $NAME
  fi
else
  URL="http://${DBNAME}.${DOMAIN}/"
fi

if [[ $SKIP == "false" ]]; then
  read -p "Email (${GITEMAIL}) or: " USEREMAIL && echo ""
  read -p "Firstname (${GITNAME}) or: " USERFIRST && echo ""
  read -p "Lastname (admin) or: " USERLAST && echo ""
  read -p "Admin name (${ADMINNAME}) or: " USERNAME && echo ""
  read -sp "Password (admin123) or: " USERPASS && echo ""
  read -p "BackendURL (admin) or: " BACKURL && echo ""
fi

read -p "Also install Hyva? [y/N] " HYVA && echo ""

if [[ -z "$USEREMAIL" ]]; then USEREMAIL="$GITEMAIL"; fi
if [[ -z "$USERFIRST" ]]; then USERFIRST="$GITNAME"; fi
if [[ -z "$USERLAST" ]]; then USERLAST="admin"; fi
if [[ -z "$USERNAME" ]]; then USERNAME="$ADMINNAME"; fi
if [[ -z "$USERPASS" ]]; then USERPASS="admin123"; fi
if [[ -z "$BACKURL" ]]; then BACKURL="admin"; fi

# Setup installation
echo "Setting up Magento 2 composer"
composer create-project \
  --no-install \
  --stability dev \
  --prefer-source \
  --repository-url=https://repo.magento.com/ magento/project-community-edition=$MVERSION $NAME &&
cd $NAME

echo "Adjusting composer settings to allow dev packages"
composer config minimum-stability dev
composer config prefer-stable true

echo "Setting up local composer folder"
mkdir -p package-source
composer config repositories.local-packages path package-source/*/*

if [[ $SKIP == "true" ]]; then
  echo "Copying composer authentication"
  mkdir -p var/composer_home
  test -f ~/.composer/auth.json &&
  cp ~/.composer/auth.json var/composer_home/auth.json
else
  read -p "Copy composer authentication? [Y/n] "
  echo ""
  if [[ $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
    echo "Copying composer authentication"
    mkdir -p var/composer_home
    test -f ~/.composer/auth.json &&
    cp ~/.composer/auth.json var/composer_home/auth.json
  fi
fi

echo "Adding Magento 2 modules"
if [[ $SKIP == "true" ]]; then
  for i in "${PLUGINS[@]}"; do
    composer require --no-update $i
  done;
else
  for i in "${PLUGINS[@]}"; do
    read -p "Also install $i? [Y/n] " && echo ""
    if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
      composer require --no-update $i
    fi
  done;
fi

if [[ $SKIP == "true" ]]; then
  for i in "${DEVPLUGINS[@]}"; do
    composer require --dev --no-update $i
  done;
else
  for i in "${DEVPLUGINS[@]}"; do
    read -p "Also install $i? [Y/n] " && echo ""
    if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
      composer require --dev --no-update $i
    fi
  done;
fi

if [[ $HYVA =~ ^[yY]|[yY][eE][sS]$ ]]; then
  bash $(dirname "${BASH_SOURCE}")/create-bin/hyva;
fi;

# Run installation
echo "Running instalation.. Enjoy a cup of coffee in the meantime"
COMPOSER_MEMORY_LIMIT=-1 composer install

# Safety check for mariaDB with installation
MARIADB_VERSION=$(mariadb -V);
if [[ $MARIADB_VERSION =~ "10.5.4" ]] || [[ $$MARIADB_VERSION =~ "10.6.4" ]]; then
  echo "Before continuing, make sure you the right mariadb version set in your etc/di.xml"
  read -rsn1 -p "When ready, press any key to continue";
  echo "";
fi

bin/magento setup:install \
  --base-url="${URL}" \
  --db-host="${DBHOST}" \
  --db-name="${DBNAME}" \
  --db-user="${DBUSER}" \
  --db-password="${DBPASS}" \
  --admin-firstname="${USERFIRST}" \
  --admin-lastname="${USERLAST}" \
  --admin-email="${USEREMAIL}" \
  --admin-user="${USERNAME}" \
  --admin-password="${USERPASS}" \
  --language=en_US \
  --currency=USD \
  --timezone=Europe/Amsterdam \
  --use-rewrites=1 \
  --backend-frontname="${BACKURL}"

if [[ $SKIP == "true" ]]; then
  for i in "${SETCONFIG[@]}"; do
    bin/magento $i
  done;
else
  read -p "Set mode to developer? [Y/n] "
  echo ""
  if [[ $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
    bin/magento deploy:mode:set production
  else
    for i in "${SETCONFIG[@]}"; do
      bin/magento $i
    done;
  fi
fi
