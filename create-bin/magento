#!/bin/bash

GITNAME="$(git config --global --get user.name | head -n1 | cut -d " " -f1)"
GITEMAIL="$(git config --global --get user.email)"
NAME="$1"
DOMAIN="test"
ADMINNAME="$(echo "$GITNAME" | tr '[:upper:]' '[:lower:]')"
ADMINPASS="admin123$"
SKIP="false"
SECURE="true"
LARAVEL_VALET="false"

DEFAULT_DBHOST="localhost"
DEFAULT_DBUSER="root"
DEFAULT_DBPASS="root"
MYSQL="mysql -proot"

MVERSION="2.4.8"
MEDITION="community"

if [[ -z "$NAME" ]]; then
  echo "The Magento install requires a name!" && exit
fi

if [[ $(valet -V | cut -f1,2 -d ' ') == "Laravel Valet" ]]; then
  DEFAULT_DBHOST="127.0.0.1"
  LARAVEL_VALET="true"
fi

echo "What Magento edition do want to use?"
echo "Options: community, enterprise, mage-os"
read -p "Edition (community): " EDITION
if [[ -n "$EDITION" ]]; then MEDITION="$EDITION"; fi

if [[ $MEDITION == "mage-os" ]]; then
  MVERSION="^1.0"
fi

# See versions at https://experienceleague.adobe.com/docs/commerce-operations/release/versions.html
echo "What Magento version do want to install?"
echo "  - empty = latest"
echo "  Or use your own Magento2 version"
read -p "Version ($MVERSION): " VERSION
if [[ -n "$VERSION" ]]; then MVERSION="$VERSION"; fi

if [[ $MEDITION == "mage-os" ]]; then
  echo "Using $MEDITION $MVERSION"
else
  echo "Using Magento $MEDITION $MVERSION"
fi

PLUGINS=(
  community-engineering/language-nl_nl
  cweagans/composer-patches
  yireo/magento2-theme-commands
  yireo/magento2-checkouttester2
  siteation/magento2-storeinfo
  siteation/magento2-storeinfo-menus
  siteation/magento2-storeinfo-usps
);

DEVPLUGINS=(
  avstudnitz/scopehint2
  spatie/ray
);

SETCONFIG=(
  "config:set admin/usage/enabled 0"
  "config:set admin/security/session_lifetime 86400"
  "config:set admin/security/password_lifetime ''"
  "deploy:mode:set developer"
);

read -p "Run quick install? [Y/n] " && echo ""
if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
  SKIP="true"
fi

# Setup for instalation
if [[ $SKIP == "false" ]]; then
  read -p "DB Host (${DEFAULT_DBHOST}) or: " DBHOST && echo ""
  read -p "DB name: ${NAME} or " DBNAME && echo ""
  read -p "DB User (${DEFAULT_DBUSER}) or: " DBUSER && echo ""
  read -p "DB Password (${DEFAULT_DBPASS}) or: " DBPASS && echo ""
fi

if [[ -z "$DBHOST" ]]; then DBHOST="${DEFAULT_DBHOST}"; fi
if [[ -z "$DBNAME" ]]; then DBNAME="${NAME}"; fi
if [[ -z "$DBUSER" ]]; then DBUSER="${DEFAULT_DBUSER}"; fi
if [[ -z "$DBPASS" ]]; then DBPASS="${DEFAULT_DBPASS}"; fi

if command -v mysql &> /dev/null; then
  echo "creating new database"
  $MYSQL -e "DROP DATABASE \`${DBNAME}\`;"
  $MYSQL -e "CREATE DATABASE \`${DBNAME}\`;"
else
  echo "First create a datebase for your Magento project"
  read -rsn1 -p "When ready, press any key to continue"
fi

if [[ $SKIP == "false" ]]; then
  if [[ $SECURE == "true" ]]; then
    read -p "Use secure url? [Y/n] " && echo ""
    if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then SECURE="false"; fi;
  else
    read -p "Use secure url? [y/N] " && echo ""
    if [[ $REPLY =~ ^[yY]|[yY][eE][sS]$ ]]; then SECURE="true"; fi;
  fi
fi

if [[ $SECURE == "true" ]]; then
  URL="https://${NAME}.${DOMAIN}/"
  if command -v valet &> /dev/null; then
    echo "Setting domain ssl certificate"
    valet secure $NAME
  fi
else
  URL="http://${NAME}.${DOMAIN}/"
fi

if [[ $SKIP == "false" ]]; then
  read -p "Email (${GITEMAIL}) or: " USEREMAIL && echo ""
  read -p "Firstname (${GITNAME}) or: " USERFIRST && echo ""
  read -p "Lastname (admin) or: " USERLAST && echo ""
  read -p "Admin name (${ADMINNAME}) or: " USERNAME && echo ""
  read -sp "Password ($ADMINPASS) or: " USERPASS && echo ""
  read -p "BackendURL (admin) or: " BACKURL && echo ""
fi

if [[ -z "$USEREMAIL" ]]; then USEREMAIL="$GITEMAIL"; fi
if [[ -z "$USERFIRST" ]]; then USERFIRST="$GITNAME"; fi
if [[ -z "$USERLAST" ]]; then USERLAST="admin"; fi
if [[ -z "$USERNAME" ]]; then USERNAME="$ADMINNAME"; fi
if [[ -z "$USERPASS" ]]; then USERPASS="$ADMINPASS"; fi
if [[ -z "$BACKURL" ]]; then BACKURL="admin"; fi

# Setup installation
echo "Setting up Magento 2 composer"
if [[ $MEDITION == "mage-os" ]]; then
  composer create-project \
    --no-install \
    --stability dev \
    --prefer-source \
    --repository-url=https://repo.mage-os.org/ mage-os/project-community-edition=$MVERSION $NAME
else
  composer create-project \
    --no-install \
    --stability dev \
    --prefer-source \
    --repository-url=https://repo.magento.com/ magento/project-$MEDITION-edition=$MVERSION $NAME
fi

if [ ! -d $NAME ]; then
  echo "Creation failed, see error above" && exit;
fi

cd $NAME

echo "Adjusting composer settings to allow dev packages"
composer config minimum-stability dev
composer config prefer-stable true
composer config allow-plugins.cweagans/composer-patches true

echo "Setting up local composer folder"
mkdir -p package-source
composer config repositories.local-packages path package-source/*/*

if [[ $SKIP == "true" ]]; then
  echo "Copying composer authentication"
  mkdir -p var/composer_home
  test -f ~/.composer/auth.json &&
  cp ~/.composer/auth.json var/composer_home/auth.json
else
  read -p "Copy composer authentication? [Y/n] "
  echo ""
  if [[ $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
    echo "Copying composer authentication"
    mkdir -p var/composer_home
    test -f ~/.composer/auth.json &&
    cp ~/.composer/auth.json var/composer_home/auth.json
  fi
fi

echo "Adding Magento 2 modules"
if [[ $SKIP == "true" ]]; then
  for i in "${PLUGINS[@]}"; do
    composer require --no-update $i
  done;
else
  for i in "${PLUGINS[@]}"; do
    read -p "Also install $i? [Y/n] " && echo ""
    if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
      composer require --no-update $i
    fi
  done;
fi

if [[ $SKIP == "true" ]]; then
  for i in "${DEVPLUGINS[@]}"; do
    composer require --dev --no-update $i
  done;
else
  for i in "${DEVPLUGINS[@]}"; do
    read -p "Also install $i? [Y/n] " && echo ""
    if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
      composer require --dev --no-update $i
    fi
  done;
fi

# Run installation
echo "Running instalation.. Enjoy a cup of coffee in the meantime"
composer install

bin/magento setup:install \
  --base-url="${URL}" \
  --db-host="${DBHOST}" \
  --db-name="${DBNAME}" \
  --db-user="${DBUSER}" \
  --db-password="${DBPASS}" \
  --admin-firstname="${USERFIRST}" \
  --admin-lastname="${USERLAST}" \
  --admin-email="${USEREMAIL}" \
  --admin-user="${USERNAME}" \
  --admin-password="${USERPASS}" \
  --language=en_US \
  --currency=USD \
  --timezone=Europe/Amsterdam \
  --use-rewrites=1 \
  --search-engine=opensearch \
  --opensearch-host=localhost \
  --opensearch-port=9200 \
  --opensearch-index-prefix=magento2 \
  --opensearch-enable-auth=0 \
  --opensearch-timeout=15 \
  --session-save=redis \
  --session-save-redis-host=localhost \
  --session-save-redis-db=2 \
  --session-save-redis-max-concurrency=20 \
  --cache-backend=redis \
  --cache-backend-redis-server=127.0.0.1 \
  --cache-backend-redis-db=0 \
  --page-cache=redis \
  --page-cache-redis-server=127.0.0.1 \
  --page-cache-redis-db=1 \
  --backend-frontname="${BACKURL}"

if [[ $SKIP == "true" ]]; then
  for i in "${SETCONFIG[@]}"; do
    bin/magento $i
  done;
  if [[ $MEDITION != "mage-os" ]]; then
    bin/magento module:disable Magento_AdminAdobeImsTwoFactorAuth
  fi
  bin/magento module:disable Magento_TwoFactorAuth
else
  read -p "Set mode to developer? [Y/n] "
  echo ""
  if [[ $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
    bin/magento deploy:mode:set production
  else
    for i in "${SETCONFIG[@]}"; do
      bin/magento $i
    done;
      if [[ $MEDITION != "mage-os" ]]; then
        bin/magento module:disable Magento_AdminAdobeImsTwoFactorAuth
      fi
      bin/magento module:disable Magento_TwoFactorAuth
  fi
fi

# Add Stores via Valet config
if [[ $LARAVEL_VALET == "true" ]]; then
cat <<EOF > .valet-env.php
<?php declare(strict_types=1);

return [
  '$NAME' => [
    'MAGE_RUN_CODE' => 'default',
    'MAGE_RUN_TYPE' => 'store',
  ],
  // 'store-2' => [
  //  'MAGE_RUN_CODE' => 'default2', // Store Code
  //  'MAGE_RUN_TYPE' => 'store',
  // ]
];
EOF
fi

# if mage
if command -v mage &>/dev/null; then
  # Add hyva
  read -p "Also install Hyv√§? [Y/n] "
  echo ""
  if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
    mage add hyva
  else
    bin/magento setup:upgrade
  fi
else
  bin/magento setup:upgrade
fi

bin/magento indexer:reindex
bin/magento cache:flush
