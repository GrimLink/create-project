#!/bin/bash

GITNAME="$(git config --global --get user.name | head -n1 | cut -d " " -f1)"
GITEMAIL="$(git config --global --get user.email)"
NAME="$1"
SKIP="false"

PLUGINS=(
  kadence-blocks
  duplicate-post
  disable-json-api
  advanced-custom-fields
);

# Check if dependacy exist
if ! command -v wp &> /dev/null; then
  echo "wp-cli is not installed please install it via https://wp-cli.org/" &&
  exit;
fi

if [[ -z "$NAME" ]]; then
  echo "The WP install requires a name" && exit
fi

read -p "Run quick install? [Y/n] " && echo ""
if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
  SKIP="true"
fi

# Setup for instalation
if [[ $SKIP == "false" ]]; then
  read -p "DB Host (localhost) or: " DBHOST && echo ""
  read -p "DB name: ${NAME} or " DBNAME && echo ""
  read -p "DB User (root) or: " DBUSER && echo ""
  read -p "DB Password (root) or: " DBPASS && echo ""
fi

if [[ -z "$DBHOST" ]]; then DBHOST="localhost"; fi
if [[ -z "$DBNAME" ]]; then DBNAME="${NAME}"; fi
if [[ -z "$DBUSER" ]]; then DBUSER="root"; fi
if [[ -z "$DBPASS" ]]; then DBPASS="root"; fi

if command -v valet &> /dev/null; then
  valet db create $DBNAME
else
  echo "First create a datebase for you Wordpress project"
  read -rsn1 -p "When ready, press any key to continue"
fi

echo "Set URL"
echo " - empty = http://${DBNAME}.test/"
echo " - s or secure = https://${DBNAME}.test/"
echo " - Or use your own"
read URL
if [[ -z "$URL" ]]; then
  URL="http://${DBNAME}.test/"
elif [[ "$URL" == "s" ]] || [[ "$URL" == "secure" ]]; then
  URL="https://${DBNAME}.test/"
fi

if [[ $SKIP == "false" ]]; then
  read -p "Email (${GITEMAIL}) or: " USEREMAIL && echo ""
  TOLOWERNAME="$(echo "$GITNAME" | tr '[:upper:]' '[:lower:]')"
  read -p "Admin name (admin_${TOLOWERNAME}) or: " USERNAME && echo ""
  read -sp "Password (admin123) or: " USERPASS && echo ""
fi

if [[ -z "$USEREMAIL" ]]; then USEREMAIL="$GITEMAIL"; fi
if [[ -z "$USERNAME" ]]; then USERNAME="$GITNAME"; fi
if [[ -z "$USERPASS" ]]; then USERPASS="admin123"; fi

# Run isntallation
mkdir $NAME
cd $NAME
if [[ "$URL" == "s" ]] || [[ "$URL" == "secure" ]]; then
  echo "Setting domain ssl certificate"
  if command -v valet &> /dev/null; then valet secure ${NAME}; fi
fi

wp core download &&
wp core config \
  --dbname=$DBNAME \
  --dbuser=$DBUSER \
  --dbpass=$DBPASS \
  --dbhost=$DBHOST \
  --dbprefix="wp_" &&

wp core install \
  --url="${URL}" \
  --title="${NAME}" \
  --admin_user="${USERNAME}" \
  --admin_password="${USERPASS}" \
  --admin_email="${USEREMAIL}" \
  --skip-email

# Set permalink structure to make endpoints work
wp option update permalink_structure '/%postname%'

# Check if the installation went well
if [ ! -d "wp-content" ]; then
  echo "Something went wrong, no wp-content folder found found" && exit;
fi;

# Delete non-used themes
wp theme delete twentyseventeen twentynineteen

# Delete non-used plugins
wp plugin delete akismet
# Delete non-used plugins with a file direct in de plugins folder
wp plugin delete hello

# install languages
wp language core install nl_NL &&
wp language theme update twentytwenty

# Add aditonal plugins
if [[ $SKIP == "true" ]]; then
  for i in "${PLUGINS[@]}"; do
    wp plugin install $i
    wp plugin activate $i
  done;
  wp plugin install wps-hide-login
else
  for i in "${PLUGINS[@]}"; do
    read -p "Add $i? [Y/n] " && echo ""
    if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
      wp plugin install $i &&
      wp plugin activate $i
    fi
  done;

  read -p "Add wps-hide-login? [Y/n] " && echo ""
  if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
    wp plugin install wps-hide-login
  fi
fi

read -p "Also setup GraphQL Api? [y/N] " && echo ""
if [[ $REPLY =~ ^[yY]|[yY][eE][sS]$ ]]; then
  cd wp-content/plugins
  git clone git@github.com:wp-graphql/wp-graphql.git
  git clone git@github.com:wp-graphql/wp-graphql-acf.git
  cd ../..
  wp plugin activate wp-graphql
  wp plugin activate wp-graphql-acf
  echo "You can test your endpoint via /graphql";
fi
