#!/bin/bash

GITNAME="$(git config --global --get user.name | head -n1 | cut -d " " -f1)"
GITEMAIL="$(git config --global --get user.email)"
NAME="$1"
DOMAIN="test"
ADMINNAME="$(echo "$GITNAME" | tr '[:upper:]' '[:lower:]')"
ADMINPASS="admin123$"
SKIP="false"
SECURE="true"
LARAVEL_VALET="false"
WEPROVIDE_VALET="false"

DEFAULT_DBHOST="localhost"
DEFAULT_DBUSER="root"
DEFAULT_DBPASS="root"

PLUGINS=(
  duplicate-post
  disable-json-api
  advanced-custom-fields
  gallery-block-lightbox
  layout-grid
);

# Check if dependacy exist
if ! command -v wp &> /dev/null; then
  echo "wp-cli is not installed please install it via https://wp-cli.org/" &&
  exit;
fi

if [[ -z "$NAME" ]]; then
  echo "The WP install requires a name" && exit
fi

if [[ $(valet -V | cut -f1,2 -d ' ') == "Laravel Valet" ]]; then
  DEFAULT_DBHOST="127.0.0.1"
  LARAVEL_VALET="true"
fi

if [[ $(valet -V | cut -f1 -d ' ') == "Valet+" ]]; then
  WEPROVIDE_VALET="true"
fi

read -p "Run quick install? [Y/n] " && echo ""
if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
  SKIP="true"
fi

# Setup for instalation
if [[ $SKIP == "false" ]]; then
  read -p "DB Host (${DEFAULT_DBHOST}) or: " DBHOST && echo ""
  read -p "DB name: ${NAME} or " DBNAME && echo ""
  read -p "DB User (${DEFAULT_DBUSER}) or: " DBUSER && echo ""
  read -p "DB Password (${DEFAULT_DBPASS}) or: " DBPASS && echo ""
fi

if [[ -z "$DBHOST" ]]; then DBHOST="${DEFAULT_DBHOST}"; fi
if [[ -z "$DBNAME" ]]; then DBNAME="${NAME}"; fi
if [[ -z "$DBUSER" ]]; then DBUSER="${DEFAULT_DBUSER}"; fi
if [[ -z "$DBPASS" ]]; then DBPASS="${DEFAULT_DBPASS}"; fi

MYSQL="mysql -u '$DBUSER' --password=${DBPASS} --socket /tmp/mysql_3306.sock"

if command -v valet &> /dev/null; then
  if [[ $LARAVEL_VALET == "true" ]]; then
    echo "creating new database"
    $MYSQL -e "DROP DATABASE \`${DBNAME}\`;"
    $MYSQL -e "CREATE DATABASE \`${DBNAME}\`;"
  elif [[ $WEPROVIDE_VALET == "true" ]]; then
    echo "creating new database"
    valet db create $DBNAME
  fi
elif command -v mysql &> /dev/null; then
  echo "creating new database"
  $MYSQL -e "DROP DATABASE \`${DBNAME}\`;"
  $MYSQL -e "CREATE DATABASE \`${DBNAME}\`;"
else
  echo "First create a datebase for your Wordpress project"
  read -rsn1 -p "When ready, press any key to continue"
fi

if [[ $SKIP == "false" ]]; then
  if [[ $SECURE == "true" ]]; then
    read -p "Use secure url? [Y/n] " && echo ""
    if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then SECURE="false"; fi;
  else
    read -p "Use secure url? [y/N] " && echo ""
    if [[ $REPLY =~ ^[yY]|[yY][eE][sS]$ ]]; then SECURE="true"; fi;
  fi
fi

if [[ $SECURE == "true" ]]; then
  URL="https://${NAME}.${DOMAIN}/"
  if command -v valet &> /dev/null; then
    echo "Setting domain ssl certificate"
    valet secure $NAME
  fi
else
  URL="http://${NAME}.${DOMAIN}/"
fi

if [[ -z "$USEREMAIL" ]]; then USEREMAIL="$GITEMAIL"; fi
if [[ -z "$USERNAME" ]]; then USERNAME="$ADMINNAME"; fi
if [[ -z "$USERPASS" ]]; then USERPASS="$ADMINPASS"; fi

# Run installation
mkdir $NAME
cd $NAME

wp core download &&
wp core config \
  --dbname=$DBNAME \
  --dbuser=$DBUSER \
  --dbpass=$DBPASS \
  --dbhost=$DBHOST \
  --dbprefix="wp_" &&

wp core install \
  --url="${URL}" \
  --title="${NAME}" \
  --admin_user="${USERNAME}" \
  --admin_password="${USERPASS}" \
  --admin_email="${USEREMAIL}" \
  --skip-email

# Set permalink structure to make endpoints work
wp option update permalink_structure '/%postname%'

# Check if the installation went well
if [ ! -d "wp-content" ]; then
  echo "Something went wrong, no wp-content folder found found" && exit;
fi;

# Delete non-used themes
wp theme delete twentytwenty twentytwentyone

# Create child theme and activate it

wp scaffold child-theme twentytwentytwo-child --parent_theme=twentytwentytwo  --activate

cp -R wp-content/themes/twentytwentytwo/{templates,parts,styles,screenshot.png,theme.json} wp-content/themes/twentytwentytwo-child

# Delete non-used plugins
wp plugin delete akismet
# Delete non-used plugins with a file direct in de plugins folder
wp plugin delete hello

# install languages
wp language core install nl_NL &&
wp language theme update twentytwentytwo

# update plugin languages
wp language plugin install --all en_GB nl_NL

# Add aditonal plugins
if [[ $SKIP == "true" ]]; then
  for i in "${PLUGINS[@]}"; do
    wp plugin install $i
    wp plugin activate $i
  done;
  wp plugin install wps-hide-login
else
  for i in "${PLUGINS[@]}"; do
    read -p "Add $i? [Y/n] " && echo ""
    if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
      wp plugin install $i &&
      wp plugin activate $i
    fi
  done;

  read -p "Add wps-hide-login? [Y/n] " && echo ""
  if [[ ! $REPLY =~ ^[nN]|[nN][oO]$ ]]; then
    wp plugin install wps-hide-login
  fi
fi

read -p "Also setup GraphQL Api? [y/N] " && echo ""
if [[ $REPLY =~ ^[yY]|[yY][eE][sS]$ ]]; then
  cd wp-content/plugins
  git clone git@github.com:wp-graphql/wp-graphql.git
  git clone git@github.com:wp-graphql/wp-graphql-acf.git
  cd ../..
  wp plugin activate wp-graphql
  wp plugin activate wp-graphql-acf
  echo "You can test your endpoint via /graphql";
fi
